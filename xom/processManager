#!/usr/bin/env python
import argparse
import sys
import os
import shutil
import configparser
import warnings
import time

try:
    from manage_processes import ProcessManager
    from get_dataframes import GetDataFrame
except Exception as err:
    print( "the error {}".format( err ) )


def get_plugins(list_plugings):
    """
    :param list_plugings: list of strings of plugins
    :return: tuple of plugins
    """
    plugins_tuple = ()
    try:
        for plug in list_plugings.split( ", " ):
            assert isinstance( plug,str )
            # one needs the comma here to be able to add it to tuple
            plugins_tuple += plug,
    except Exception as err:
        print( "the list of plugins is empty")
        print("the error:", err)

    return plugins_tuple


def move_files(currentdir, copydir):
    """
    This function create the directory and copy the json files and also the png figures into it
    :param currentdir: this is the current directory where the files are
    :param copydir: this directory where the data will be stored
    """
    # loop over files currentdir

    for fname in os.listdir( currentdir ):
        if os.path.isfile( fname ):

            if fname.endswith( ".json" ):
                # lets mv the json file to copydir
                shutil.move( currentdir + '/' + fname, copydir + '/' + fname )
            elif fname.endswith( '.png' ):
                # lets move the figures to copydir
                shutil.move( currentdir + '/' + fname, copydir + '/' + fname )
            else:
                continue


# argument to be provided to the process manager
parser = argparse.ArgumentParser( description="process manager" )
# need this to read the ini file
config = configparser.ConfigParser()


def main():
    start_time = time.time()
    time_budget = 600
    """
    mainly run the process manager
    there are two configurations: one goes through pm.ini, the other through the user
    It produces png files for each process and one json file for all processes
    """
    # read pm.init to set the paths where the files can be saved
    config.read( "pm.ini" )
    # get the configs for straxen
    context_version = config["pm"]["context_version"]
    new_process = config["pm"]["new_process"]
    print("New process variable value: ", new_process)
    parser.add_argument( '--dataType',
                         default='calibration',
                         required=True,
                         type=str,
                         help="Name of the type of analysis, either calibration or DM" )
    parser.add_argument( '--source',
                         default='',
                         type=str,
                         help="Name of source of calibration" )
    parser.add_argument( '--runName',
                         default='191001_',
                         required=True,
                         type=str,
                         help="Input file name" )
    parser.add_argument( '--runId',
                         default=1234,
                         required=True,
                         type=int,
                         help="Input run_number" )
    parser.add_argument( '--outFolder',
                         default=config["pm"]["json_fig_path"],
                         type=str,
                         help="Output folder name" )
    parser.add_argument( '--plugins',
                         default=config["pm"]["plugins"],
                         type=str,
                         help="plugins needed for straxen to produce DF" )
    parser.add_argument( '--onlyNew',
                         default = "False",
                         type=str,
                         help="True if only new observable needs to be brought up to data." )
    # Get the object of arguments, args
    args = parser.parse_args()
    print( "The procesManager has the following parameters:" )
    print( "run_id: %s" % args.runId )
    print( "run_name:%s" % args.runName )
    print( "source:%s" % args.source )
    print( "datatype=%s" % args.dataType )
    print( "output folder:%s" % args.outFolder )
    print( "only new process: %s" % args.onlyNew)
    print( "plugins: ", args.plugins, "type:", type(args.plugins))
    print( "Start Time: ", start_time)
    if args.dataType == 'calibration' and args.source == ' ':
        warnings.warn( 'If you are dealing with calibration, the source is mandatory as an argument to processManager' )
        sys.exit( 1 )
    # get the list of plugins in a tuple

    # get the data frame
    dataFrame = GetDataFrame( run_number=args.runId, run_name=args.runName, source=args.source,
                              plugins=get_plugins( args.plugins ) )
    df = dataFrame.get_data()

    # initialize the manger that handles processes
    manager = ProcessManager( dataframe=df, run_id=args.runId, run_name=args.runName, context_version=context_version,
                              data_stream=args.dataType, source=args.source, new_process=new_process )

    # check for the size of the data frame
    if len( df ) == 0:

        print( "We are going to write the basic infos of this run" )
        warnings.warn( "The run:%s you have provided has no entries" % args.runName, exc_info=1 )
        # write the json file and that is it
        manager.write_json_file()
    else:
        try:
            # run all the processes including new obs for current run number
            if (args.onlyNew == "False"):
                manager.process()
           # write all information in a json file
                manager.write_json_file()
            else:
           #computes only the new observable for a past run to bring new observable up to date
                manager.process_new()
                time.sleep(30)
        except Exception as err:
            print( "the error {}".format( err ) )

    # create a new directory in /scratch, where the data(json file and png figure) will be stored
    try:
        copydir = args.outFolder
        os.makedirs( copydir, exist_ok=True )
        currentdir = os.getcwd()
        # run the function that copy(move) the png files and json files into the proper directory
        move_files( currentdir, copydir )
    except Exception as err:
        print( "there is a problem creating the directory:", err )


if __name__ == "__main__":
    main()
