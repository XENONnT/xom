#!/usr/bin/env python
import argparse
import sys
import os
import shutil
import configparser
import warnings
try:
    from manage_processes import ProcessManager
    from get_dataframes import GetDataFrame
except Exception as err:
    print("the error {}".format(err))


def move_files(currentdir, copydir):
    """
    This function create the directory and copy the json files and also the png figures into it
    :param currentdir: this is the current directory where the files are
    :param copydir: this directory where the data will be stored
    """
    # loop over files currentdir
    print("the current directory: ", currentdir, type(currentdir))
    print("the copy dir:", copydir, type(currentdir))

    for fname in os.listdir(currentdir):
        print("the file name is: ", fname, "with the type", type(fname))
        if fname.endswith(".json"):
            #lets mv the json file to copydir
            shutil.move(currentdir + '/' + fname, copydir + '/' + fname)
        elif fname.endswith('.png'):
            # lets move the figures to copydir
            shutil.move( currentdir + '/' + fname, copydir + '/' + fname )
        else:
            warnings.warn("None of the two files are produced")
            continue



#agument to be provided to the process manager
parser = argparse.ArgumentParser(description="process manager")
# need this to read the ini file
config = configparser.ConfigParser()

def main():
    # read pm.init to set the paths where the files can be saved
    config.read("pm.ini")
    #get the configs for straxen
    straxen_version = config["pm"]["straxen_version"]

    parser.add_argument('--dataType',
                        default='calibration',
                        required=True,
                        type=str,
                        help="Name of the type of analysis, either calibration or DM")
    parser.add_argument('--source',
                        default='',
                        type=str,
                        help="Name of source of calibration")
    parser.add_argument('--runName',
                        default='191001_',
                        required=True,
                        type=str,
                        help="Input file name")
    parser.add_argument('--runId',
                        default=1234,
                        required=True,
                        type=int,
                        help="Input run_number")
    parser.add_argument('--outFolder',
                        default="%s"%config["pm"]["json_fig_path"],
                        type=str,
                        help="Output folder name" )
    parser.add_argument('--plugins',
                        default=config["pm"]["plugins"],
                        type=str,
                        nargs="*",
                        help="plugins needed for straxen to produce DF" )

    # Get the object of arguments, args
    args = parser.parse_args()
    print("The procesManager: ", args.runId, args.runName, args.source, args.dataType)
    print(args.outFolder)
    if args.dataType == 'calibration' and args.source == ' ':
        warnings.warn('If you are dealing with calibration, the source is mandatory as an argument to processManager')
        sys.exit(1)

    # get the data frame
    dataFrame = GetDataFrame(run_number=args.runId, run_name=args.runName, source=args.source, plugins=args.plugins)
    df = dataFrame.get_data()

    # initialize the manger that handles processes
    manager = ProcessManager(dataframe=df, run_id=args.runId, run_name=args.runName, straxen_version=straxen_version,
                             data_stream=args.dataType, source=args.source )

    # check for the size of the data frame
    if len(df) == 0:

        print("We are going to writ the basic infos of this run")
        warnings.warn("The run:%s you have provided has no entries" % args.runName, exc_info=1)
        #write the json file and that is it
        manager.write_json_file()
    else:
        try:
            # run all the processes
            manager.process()

            # write all information in a json file
            manager.write_json_file()
        except Exception as err:
            print("the error {}".format(err))

    # create a new directory in /scratch, where the data(json file and png figure) will be stored
    copydir = os.makedirs(args.outFolder + '/' + str(args.runId))
    currentdir = os.getcwd()
    # run the function that copy(move) the png files and json files into the proper directory
    move_files( currentdir, copydir )
                        
if __name__ == "__main__":
    main()
